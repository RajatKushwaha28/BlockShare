{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\acer\\\\Documents\\\\BlockShare\\\\client\\\\src\\\\components\\\\Display.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { FaFileImage, FaFilePdf } from \"react-icons/fa\";\nimport axios from \"axios\";\nimport \"./Display.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Display = ({\n  contract,\n  account\n}) => {\n  _s();\n  const [data, setData] = useState([]);\n  const getdata = async () => {\n    let dataArray;\n    const Otheraddress = document.querySelector(\".address\").value;\n    try {\n      if (Otheraddress) {\n        dataArray = await contract.display(Otheraddress);\n        console.log(dataArray);\n      } else {\n        dataArray = await contract.display(account);\n      }\n    } catch (e) {\n      alert(\"You don't have access\");\n      return;\n    }\n    const isEmpty = Object.keys(dataArray).length === 0;\n    if (!isEmpty) {\n      const str = dataArray.toString();\n      const str_array = str.split(\",\");\n\n      // Use a promise to fetch the file type for each item\n      const items = await Promise.all(str_array.map(async (item, i) => {\n        const url = `https://gateway.pinata.cloud/ipfs/${item.substring(6)}`;\n        try {\n          // Fetch the content-type using HEAD request\n          const response = await axios.head(url);\n          const contentType = response.headers[\"content-type\"];\n          if (contentType.includes(\"image\")) {\n            return /*#__PURE__*/_jsxDEV(\"a\", {\n              href: url,\n              target: \"_blank\",\n              rel: \"noopener noreferrer\",\n              className: \"file-link\",\n              children: [/*#__PURE__*/_jsxDEV(FaFileImage, {\n                size: 40,\n                color: \"blue\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 44,\n                columnNumber: 19\n              }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"file-name\",\n                children: \"Image File\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 45,\n                columnNumber: 19\n              }, this)]\n            }, i, true, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 17\n            }, this);\n          } else if (contentType.includes(\"pdf\")) {\n            return /*#__PURE__*/_jsxDEV(\"a\", {\n              href: url,\n              target: \"_blank\",\n              rel: \"noopener noreferrer\",\n              className: \"file-link\",\n              children: [/*#__PURE__*/_jsxDEV(FaFilePdf, {\n                size: 40,\n                color: \"red\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 51,\n                columnNumber: 19\n              }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"file-name\",\n                children: \"PDF File\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 52,\n                columnNumber: 19\n              }, this)]\n            }, i, true, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 17\n            }, this);\n          } else {\n            return /*#__PURE__*/_jsxDEV(\"a\", {\n              href: url,\n              target: \"_blank\",\n              rel: \"noopener noreferrer\",\n              className: \"file-link\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Unknown file type\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 58,\n                columnNumber: 19\n              }, this)\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 17\n            }, this);\n          }\n        } catch (error) {\n          console.error(\"Error fetching file type:\", error);\n          return /*#__PURE__*/_jsxDEV(\"a\", {\n            href: url,\n            target: \"_blank\",\n            rel: \"noopener noreferrer\",\n            className: \"file-link\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Error loading file\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 17\n            }, this)\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 15\n          }, this);\n        }\n      }));\n      setData(items);\n    } else {\n      alert(\"No files to display\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"file-list\",\n      children: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter Address\",\n      className: \"address\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"center button\",\n      onClick: getdata,\n      children: \"Get Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Display, \"hhQqYsxLIv1exGOzUvDGOVv6fXw=\");\n_c = Display;\nexport default Display;\n\n// import { useState } from \"react\";\n// import \"./Display.css\";\n// const Display = ({ contract, account }) => {\n//   const [data, setData] = useState(\"\");\n//   const getdata = async () => {\n//     let dataArray;\n//     const Otheraddress = document.querySelector(\".address\").value;\n//     try {\n//       if (Otheraddress) {\n//         dataArray = await contract.display(Otheraddress);\n//         console.log(dataArray);\n//       } else {\n//         dataArray = await contract.display(account);\n//       }\n//     } catch (e) {\n//       alert(\"You don't have access\");\n//     }\n//     const isEmpty = Object.keys(dataArray).length === 0;\n\n//     if (!isEmpty) {\n//       const str = dataArray.toString();\n//       const str_array = str.split(\",\");\n//       // console.log(str);\n//       // console.log(str_array);\n//       const images = str_array.map((item, i) => {\n//         return (\n//           <a href={item} key={i} target=\"_blank\">\n//             <img\n//               key={i}\n//               src={`https://gateway.pinata.cloud/ipfs/${item.substring(6)}`}\n//               alt=\"new\"\n//               className=\"image-list\"\n//             ></img>\n//           </a>\n//         );\n//       });\n//       setData(images);\n//     } else {\n//       alert(\"No image to display\");\n//     }\n//   };\n//   return (\n//     <>\n//       <div className=\"image-list\">{data}</div>\n//       <input\n//         type=\"text\"\n//         placeholder=\"Enter Address\"\n//         className=\"address\"\n//       ></input>\n//       <button className=\"center button\" onClick={getdata}>\n//         Get Data\n//       </button>\n//     </>\n//   );\n// };\n// export default Display;\nvar _c;\n$RefreshReg$(_c, \"Display\");","map":{"version":3,"names":["useState","FaFileImage","FaFilePdf","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","Display","contract","account","_s","data","setData","getdata","dataArray","Otheraddress","document","querySelector","value","display","console","log","e","alert","isEmpty","Object","keys","length","str","toString","str_array","split","items","Promise","all","map","item","i","url","substring","response","head","contentType","headers","includes","href","target","rel","className","children","size","color","fileName","_jsxFileName","lineNumber","columnNumber","error","type","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/acer/Documents/BlockShare/client/src/components/Display.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport { FaFileImage, FaFilePdf } from \"react-icons/fa\";\r\nimport axios from \"axios\";\r\nimport \"./Display.css\";\r\n\r\nconst Display = ({ contract, account }) => {\r\n  const [data, setData] = useState([]);\r\n\r\n  const getdata = async () => {\r\n    let dataArray;\r\n    const Otheraddress = document.querySelector(\".address\").value;\r\n\r\n    try {\r\n      if (Otheraddress) {\r\n        dataArray = await contract.display(Otheraddress);\r\n        console.log(dataArray);\r\n      } else {\r\n        dataArray = await contract.display(account);\r\n      }\r\n    } catch (e) {\r\n      alert(\"You don't have access\");\r\n      return;\r\n    }\r\n\r\n    const isEmpty = Object.keys(dataArray).length === 0;\r\n\r\n    if (!isEmpty) {\r\n      const str = dataArray.toString();\r\n      const str_array = str.split(\",\");\r\n\r\n      // Use a promise to fetch the file type for each item\r\n      const items = await Promise.all(\r\n        str_array.map(async (item, i) => {\r\n          const url = `https://gateway.pinata.cloud/ipfs/${item.substring(6)}`;\r\n\r\n          try {\r\n            // Fetch the content-type using HEAD request\r\n            const response = await axios.head(url);\r\n            const contentType = response.headers[\"content-type\"];\r\n\r\n            if (contentType.includes(\"image\")) {\r\n              return (\r\n                <a href={url} key={i} target=\"_blank\" rel=\"noopener noreferrer\" className=\"file-link\">\r\n                  <FaFileImage size={40} color=\"blue\" /> {/* Image icon */}\r\n                  <span className=\"file-name\">Image File</span>\r\n                </a>\r\n              );\r\n            } else if (contentType.includes(\"pdf\")) {\r\n              return (\r\n                <a href={url} key={i} target=\"_blank\" rel=\"noopener noreferrer\" className=\"file-link\">\r\n                  <FaFilePdf size={40} color=\"red\" /> {/* PDF icon */}\r\n                  <span className=\"file-name\">PDF File</span>\r\n                </a>\r\n              );\r\n            } else {\r\n              return (\r\n                <a href={url} key={i} target=\"_blank\" rel=\"noopener noreferrer\" className=\"file-link\">\r\n                  <span>Unknown file type</span>\r\n                </a>\r\n              );\r\n            }\r\n          } catch (error) {\r\n            console.error(\"Error fetching file type:\", error);\r\n            return (\r\n              <a href={url} key={i} target=\"_blank\" rel=\"noopener noreferrer\" className=\"file-link\">\r\n                <span>Error loading file</span>\r\n              </a>\r\n            );\r\n          }\r\n        })\r\n      );\r\n\r\n      setData(items);\r\n    } else {\r\n      alert(\"No files to display\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"file-list\">{data}</div>\r\n      <input type=\"text\" placeholder=\"Enter Address\" className=\"address\" />\r\n      <button className=\"center button\" onClick={getdata}>\r\n        Get Data\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Display;\r\n\r\n\r\n// import { useState } from \"react\";\r\n// import \"./Display.css\";\r\n// const Display = ({ contract, account }) => {\r\n//   const [data, setData] = useState(\"\");\r\n//   const getdata = async () => {\r\n//     let dataArray;\r\n//     const Otheraddress = document.querySelector(\".address\").value;\r\n//     try {\r\n//       if (Otheraddress) {\r\n//         dataArray = await contract.display(Otheraddress);\r\n//         console.log(dataArray);\r\n//       } else {\r\n//         dataArray = await contract.display(account);\r\n//       }\r\n//     } catch (e) {\r\n//       alert(\"You don't have access\");\r\n//     }\r\n//     const isEmpty = Object.keys(dataArray).length === 0;\r\n\r\n//     if (!isEmpty) {\r\n//       const str = dataArray.toString();\r\n//       const str_array = str.split(\",\");\r\n//       // console.log(str);\r\n//       // console.log(str_array);\r\n//       const images = str_array.map((item, i) => {\r\n//         return (\r\n//           <a href={item} key={i} target=\"_blank\">\r\n//             <img\r\n//               key={i}\r\n//               src={`https://gateway.pinata.cloud/ipfs/${item.substring(6)}`}\r\n//               alt=\"new\"\r\n//               className=\"image-list\"\r\n//             ></img>\r\n//           </a>\r\n//         );\r\n//       });\r\n//       setData(images);\r\n//     } else {\r\n//       alert(\"No image to display\");\r\n//     }\r\n//   };\r\n//   return (\r\n//     <>\r\n//       <div className=\"image-list\">{data}</div>\r\n//       <input\r\n//         type=\"text\"\r\n//         placeholder=\"Enter Address\"\r\n//         className=\"address\"\r\n//       ></input>\r\n//       <button className=\"center button\" onClick={getdata}>\r\n//         Get Data\r\n//       </button>\r\n//     </>\r\n//   );\r\n// };\r\n// export default Display;\r\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,WAAW,EAAEC,SAAS,QAAQ,gBAAgB;AACvD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEvB,MAAMC,OAAO,GAAGA,CAAC;EAAEC,QAAQ;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EACzC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAEpC,MAAMc,OAAO,GAAG,MAAAA,CAAA,KAAY;IAC1B,IAAIC,SAAS;IACb,MAAMC,YAAY,GAAGC,QAAQ,CAACC,aAAa,CAAC,UAAU,CAAC,CAACC,KAAK;IAE7D,IAAI;MACF,IAAIH,YAAY,EAAE;QAChBD,SAAS,GAAG,MAAMN,QAAQ,CAACW,OAAO,CAACJ,YAAY,CAAC;QAChDK,OAAO,CAACC,GAAG,CAACP,SAAS,CAAC;MACxB,CAAC,MAAM;QACLA,SAAS,GAAG,MAAMN,QAAQ,CAACW,OAAO,CAACV,OAAO,CAAC;MAC7C;IACF,CAAC,CAAC,OAAOa,CAAC,EAAE;MACVC,KAAK,CAAC,uBAAuB,CAAC;MAC9B;IACF;IAEA,MAAMC,OAAO,GAAGC,MAAM,CAACC,IAAI,CAACZ,SAAS,CAAC,CAACa,MAAM,KAAK,CAAC;IAEnD,IAAI,CAACH,OAAO,EAAE;MACZ,MAAMI,GAAG,GAAGd,SAAS,CAACe,QAAQ,CAAC,CAAC;MAChC,MAAMC,SAAS,GAAGF,GAAG,CAACG,KAAK,CAAC,GAAG,CAAC;;MAEhC;MACA,MAAMC,KAAK,GAAG,MAAMC,OAAO,CAACC,GAAG,CAC7BJ,SAAS,CAACK,GAAG,CAAC,OAAOC,IAAI,EAAEC,CAAC,KAAK;QAC/B,MAAMC,GAAG,GAAG,qCAAqCF,IAAI,CAACG,SAAS,CAAC,CAAC,CAAC,EAAE;QAEpE,IAAI;UACF;UACA,MAAMC,QAAQ,GAAG,MAAMtC,KAAK,CAACuC,IAAI,CAACH,GAAG,CAAC;UACtC,MAAMI,WAAW,GAAGF,QAAQ,CAACG,OAAO,CAAC,cAAc,CAAC;UAEpD,IAAID,WAAW,CAACE,QAAQ,CAAC,OAAO,CAAC,EAAE;YACjC,oBACExC,OAAA;cAAGyC,IAAI,EAAEP,GAAI;cAASQ,MAAM,EAAC,QAAQ;cAACC,GAAG,EAAC,qBAAqB;cAACC,SAAS,EAAC,WAAW;cAAAC,QAAA,gBACnF7C,OAAA,CAACJ,WAAW;gBAACkD,IAAI,EAAE,EAAG;gBAACC,KAAK,EAAC;cAAM;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE,CAAC,KAAC,eACvCnD,OAAA;gBAAM4C,SAAS,EAAC,WAAW;gBAAAC,QAAA,EAAC;cAAU;gBAAAG,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC;YAAA,GAF5BlB,CAAC;cAAAe,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAGjB,CAAC;UAER,CAAC,MAAM,IAAIb,WAAW,CAACE,QAAQ,CAAC,KAAK,CAAC,EAAE;YACtC,oBACExC,OAAA;cAAGyC,IAAI,EAAEP,GAAI;cAASQ,MAAM,EAAC,QAAQ;cAACC,GAAG,EAAC,qBAAqB;cAACC,SAAS,EAAC,WAAW;cAAAC,QAAA,gBACnF7C,OAAA,CAACH,SAAS;gBAACiD,IAAI,EAAE,EAAG;gBAACC,KAAK,EAAC;cAAK;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE,CAAC,KAAC,eACpCnD,OAAA;gBAAM4C,SAAS,EAAC,WAAW;gBAAAC,QAAA,EAAC;cAAQ;gBAAAG,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC;YAAA,GAF1BlB,CAAC;cAAAe,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAGjB,CAAC;UAER,CAAC,MAAM;YACL,oBACEnD,OAAA;cAAGyC,IAAI,EAAEP,GAAI;cAASQ,MAAM,EAAC,QAAQ;cAACC,GAAG,EAAC,qBAAqB;cAACC,SAAS,EAAC,WAAW;cAAAC,QAAA,eACnF7C,OAAA;gBAAA6C,QAAA,EAAM;cAAiB;gBAAAG,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM;YAAC,GADblB,CAAC;cAAAe,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAEjB,CAAC;UAER;QACF,CAAC,CAAC,OAAOC,KAAK,EAAE;UACdpC,OAAO,CAACoC,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;UACjD,oBACEpD,OAAA;YAAGyC,IAAI,EAAEP,GAAI;YAASQ,MAAM,EAAC,QAAQ;YAACC,GAAG,EAAC,qBAAqB;YAACC,SAAS,EAAC,WAAW;YAAAC,QAAA,eACnF7C,OAAA;cAAA6C,QAAA,EAAM;YAAkB;cAAAG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM;UAAC,GADdlB,CAAC;YAAAe,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAEjB,CAAC;QAER;MACF,CAAC,CACH,CAAC;MAED3C,OAAO,CAACoB,KAAK,CAAC;IAChB,CAAC,MAAM;MACLT,KAAK,CAAC,qBAAqB,CAAC;IAC9B;EACF,CAAC;EAED,oBACEnB,OAAA,CAAAE,SAAA;IAAA2C,QAAA,gBACE7C,OAAA;MAAK4C,SAAS,EAAC,WAAW;MAAAC,QAAA,EAAEtC;IAAI;MAAAyC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACvCnD,OAAA;MAAOqD,IAAI,EAAC,MAAM;MAACC,WAAW,EAAC,eAAe;MAACV,SAAS,EAAC;IAAS;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACrEnD,OAAA;MAAQ4C,SAAS,EAAC,eAAe;MAACW,OAAO,EAAE9C,OAAQ;MAAAoC,QAAA,EAAC;IAEpD;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA,eACT,CAAC;AAEP,CAAC;AAAC7C,EAAA,CAlFIH,OAAO;AAAAqD,EAAA,GAAPrD,OAAO;AAoFb,eAAeA,OAAO;;AAGtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,IAAAqD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}