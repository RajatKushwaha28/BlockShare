{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\acer\\\\Documents\\\\BlockShare\\\\client\\\\src\\\\components\\\\Display.js\",\n  _s = $RefreshSig$();\n// import { useState, useEffect } from \"react\";\n// import { Image, FileText, File, Loader2 } from \"lucide-react\";\n\n// const Display = ({ contract, account }) => {\n//   const [data, setData] = useState(\"\");\n//   const [loading, setLoading] = useState(false);\n\n//   // Improved file type detection\n//   const detectFileType = async (ipfsHash) => {\n//     try {\n//       const url = `https://gateway.pinata.cloud/ipfs/${ipfsHash}`;\n//       const response = await fetch(url, { method: 'HEAD' });\n//       const contentType = response.headers.get('content-type');\n\n//       // More comprehensive content type checking\n//       if (contentType?.includes('image/') || \n//           await isImage(url)) {\n//         return 'image';\n//       } else if (contentType?.includes('application/pdf') || \n//                  await isPDF(url)) {\n//         return 'pdf';\n//       }\n//       return 'other';\n//     } catch (error) {\n//       console.error('Error detecting file type:', error);\n//       return 'other';\n//     }\n//   };\n\n//   // Helper function to check if URL points to an image\n//   const isImage = async (url) => {\n//     try {\n//       const response = await fetch(url);\n//       const blob = await response.blob();\n//       return blob.type.startsWith('image/');\n//     } catch {\n//       return false;\n//     }\n//   };\n\n//   // Helper function to check if URL points to a PDF\n//   const isPDF = async (url) => {\n//     try {\n//       const response = await fetch(url);\n//       const blob = await response.blob();\n//       return blob.type === 'application/pdf';\n//     } catch {\n//       return false;\n//     }\n//   };\n\n//   const FileItem = ({ file }) => {\n//     const [fileType, setFileType] = useState('unknown');\n//     const [isLoading, setIsLoading] = useState(true);\n\n//     useEffect(() => {\n//       const determineFileType = async () => {\n//         const type = await detectFileType(file.hash);\n//         setFileType(type);\n//         setIsLoading(false);\n//       };\n//       determineFileType();\n//     }, [file]);\n\n//     if (isLoading) {\n//       return (\n//         <div className=\"file-item p-3 border rounded-lg\">\n//           <div className=\"flex items-center gap-2\">\n//             <Loader2 className=\"animate-spin text-gray-400\" size={24} />\n//             <span className=\"text-gray-500\">Detecting file type...</span>\n//           </div>\n//         </div>\n//       );\n//     }\n\n//     return (\n//       <div className=\"file-item p-3 border rounded-lg hover:bg-gray-50 transition-colors\">\n//         <a\n//           href={`https://gateway.pinata.cloud/ipfs/${file.hash}`}\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//           className=\"flex items-start gap-3\"\n//         >\n//           <div className={`icon-wrapper p-2 rounded-lg ${\n//             fileType === 'image' ? 'bg-green-100' :\n//             fileType === 'pdf' ? 'bg-red-100' : 'bg-blue-100'\n//           }`}>\n//             {fileType === 'image' ? (\n//               <Image className=\"text-green-500\" size={24} />\n//             ) : fileType === 'pdf' ? (\n//               <FileText className=\"text-red-500\" size={24} />\n//             ) : (\n//               <File className=\"text-blue-500\" size={24} />\n//             )}\n//           </div>\n//           <div className=\"flex-grow\">\n//             <div className={`font-medium ${\n//               fileType === 'image' ? 'text-green-700' :\n//               fileType === 'pdf' ? 'text-red-700' : 'text-blue-700'\n//             }`}>\n//               {fileType === 'image' ? 'Image File' :\n//                fileType === 'pdf' ? 'PDF Document' : 'Unknown File'}\n//             </div>\n//             <div className=\"text-sm text-gray-500 truncate\">\n//               {file.hash.substring(0, 20)}...\n//             </div>\n//           </div>\n//           {fileType === 'image' && (\n//             <img\n//               src={`https://gateway.pinata.cloud/ipfs/${file.hash}`}\n//               alt=\"preview\"\n//               className=\"w-16 h-16 object-cover rounded\"\n//             />\n//           )}\n//         </a>\n//       </div>\n//     );\n//   };\n\n//   const getdata = async () => {\n//     setLoading(true);\n//     let dataArray;\n//     const Otheraddress = document.querySelector(\".address\").value;\n\n//     try {\n//       if (Otheraddress) {\n//         dataArray = await contract.display(Otheraddress);\n//       } else {\n//         dataArray = await contract.display(account);\n//       }\n//     } catch (e) {\n//       alert(\"You don't have access\");\n//       setLoading(false);\n//       return;\n//     }\n\n//     const isEmpty = Object.keys(dataArray).length === 0;\n\n//     if (!isEmpty) {\n//       const str = dataArray.toString();\n//       const str_array = str.split(\",\");\n\n//       const files = str_array.map((item) => ({\n//         url: item,\n//         hash: item.substring(6)  // Remove 'ipfs://' prefix\n//       }));\n\n//       const fileElements = files.map((file, i) => (\n//         <FileItem key={i} file={file} />\n//       ));\n\n//       setData(fileElements);\n//     } else {\n//       alert(\"No files to display\");\n//     }\n//     setLoading(false);\n//   };\n\n//   return (\n//     <div className=\"p-4\">\n//       <div className=\"grid grid-cols-1 gap-4 mb-4\">\n//         {data}\n//       </div>\n//       <div className=\"flex gap-2 items-center justify-center\">\n//         <input\n//           type=\"text\"\n//           placeholder=\"Enter Address\"\n//           className=\"address p-2 border rounded w-80\"\n//         />\n//         <button\n//           className=\"flex items-center gap-2 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 disabled:bg-blue-300 disabled:cursor-not-allowed transition-colors\"\n//           onClick={getdata}\n//           disabled={loading}\n//         >\n//           {loading && <Loader2 className=\"animate-spin\" size={16} />}\n//           Get Data\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Display;\n\nimport { useState } from \"react\";\nimport \"./Display.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Display = ({\n  contract,\n  account\n}) => {\n  _s();\n  const [data, setData] = useState(\"\");\n  const getdata = async () => {\n    let dataArray;\n    const Otheraddress = document.querySelector(\".address\").value;\n    try {\n      if (Otheraddress) {\n        dataArray = await contract.display(Otheraddress);\n        console.log(dataArray);\n      } else {\n        dataArray = await contract.display(account);\n      }\n    } catch (e) {\n      alert(\"You don't have access\");\n    }\n    const isEmpty = Object.keys(dataArray).length === 0;\n    if (!isEmpty) {\n      const str = dataArray.toString();\n      const str_array = str.split(\",\");\n      // console.log(str);\n      // console.log(str_array);\n      const images = str_array.map((item, i) => {\n        return /*#__PURE__*/_jsxDEV(\"a\", {\n          href: item,\n          target: \"_blank\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: `https://gateway.pinata.cloud/ipfs/${item.substring(6)}`,\n            alt: \"new\",\n            className: \"image-list\"\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 13\n          }, this)\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 11\n        }, this);\n      });\n      setData(images);\n    } else {\n      alert(\"No image to display\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-list\",\n      children: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter Address\",\n      className: \"address\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"center button\",\n      onClick: getdata,\n      children: \"Get Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Display, \"avaWeDctHFwWP+lC5+N1mkv/uq8=\");\n_c = Display;\nexport default Display;\nvar _c;\n$RefreshReg$(_c, \"Display\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Display","contract","account","_s","data","setData","getdata","dataArray","Otheraddress","document","querySelector","value","display","console","log","e","alert","isEmpty","Object","keys","length","str","toString","str_array","split","images","map","item","i","href","target","children","src","substring","alt","className","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/acer/Documents/BlockShare/client/src/components/Display.js"],"sourcesContent":["// import { useState, useEffect } from \"react\";\r\n// import { Image, FileText, File, Loader2 } from \"lucide-react\";\r\n\r\n// const Display = ({ contract, account }) => {\r\n//   const [data, setData] = useState(\"\");\r\n//   const [loading, setLoading] = useState(false);\r\n\r\n//   // Improved file type detection\r\n//   const detectFileType = async (ipfsHash) => {\r\n//     try {\r\n//       const url = `https://gateway.pinata.cloud/ipfs/${ipfsHash}`;\r\n//       const response = await fetch(url, { method: 'HEAD' });\r\n//       const contentType = response.headers.get('content-type');\r\n      \r\n//       // More comprehensive content type checking\r\n//       if (contentType?.includes('image/') || \r\n//           await isImage(url)) {\r\n//         return 'image';\r\n//       } else if (contentType?.includes('application/pdf') || \r\n//                  await isPDF(url)) {\r\n//         return 'pdf';\r\n//       }\r\n//       return 'other';\r\n//     } catch (error) {\r\n//       console.error('Error detecting file type:', error);\r\n//       return 'other';\r\n//     }\r\n//   };\r\n\r\n//   // Helper function to check if URL points to an image\r\n//   const isImage = async (url) => {\r\n//     try {\r\n//       const response = await fetch(url);\r\n//       const blob = await response.blob();\r\n//       return blob.type.startsWith('image/');\r\n//     } catch {\r\n//       return false;\r\n//     }\r\n//   };\r\n\r\n//   // Helper function to check if URL points to a PDF\r\n//   const isPDF = async (url) => {\r\n//     try {\r\n//       const response = await fetch(url);\r\n//       const blob = await response.blob();\r\n//       return blob.type === 'application/pdf';\r\n//     } catch {\r\n//       return false;\r\n//     }\r\n//   };\r\n\r\n//   const FileItem = ({ file }) => {\r\n//     const [fileType, setFileType] = useState('unknown');\r\n//     const [isLoading, setIsLoading] = useState(true);\r\n\r\n//     useEffect(() => {\r\n//       const determineFileType = async () => {\r\n//         const type = await detectFileType(file.hash);\r\n//         setFileType(type);\r\n//         setIsLoading(false);\r\n//       };\r\n//       determineFileType();\r\n//     }, [file]);\r\n\r\n//     if (isLoading) {\r\n//       return (\r\n//         <div className=\"file-item p-3 border rounded-lg\">\r\n//           <div className=\"flex items-center gap-2\">\r\n//             <Loader2 className=\"animate-spin text-gray-400\" size={24} />\r\n//             <span className=\"text-gray-500\">Detecting file type...</span>\r\n//           </div>\r\n//         </div>\r\n//       );\r\n//     }\r\n\r\n//     return (\r\n//       <div className=\"file-item p-3 border rounded-lg hover:bg-gray-50 transition-colors\">\r\n//         <a\r\n//           href={`https://gateway.pinata.cloud/ipfs/${file.hash}`}\r\n//           target=\"_blank\"\r\n//           rel=\"noopener noreferrer\"\r\n//           className=\"flex items-start gap-3\"\r\n//         >\r\n//           <div className={`icon-wrapper p-2 rounded-lg ${\r\n//             fileType === 'image' ? 'bg-green-100' :\r\n//             fileType === 'pdf' ? 'bg-red-100' : 'bg-blue-100'\r\n//           }`}>\r\n//             {fileType === 'image' ? (\r\n//               <Image className=\"text-green-500\" size={24} />\r\n//             ) : fileType === 'pdf' ? (\r\n//               <FileText className=\"text-red-500\" size={24} />\r\n//             ) : (\r\n//               <File className=\"text-blue-500\" size={24} />\r\n//             )}\r\n//           </div>\r\n//           <div className=\"flex-grow\">\r\n//             <div className={`font-medium ${\r\n//               fileType === 'image' ? 'text-green-700' :\r\n//               fileType === 'pdf' ? 'text-red-700' : 'text-blue-700'\r\n//             }`}>\r\n//               {fileType === 'image' ? 'Image File' :\r\n//                fileType === 'pdf' ? 'PDF Document' : 'Unknown File'}\r\n//             </div>\r\n//             <div className=\"text-sm text-gray-500 truncate\">\r\n//               {file.hash.substring(0, 20)}...\r\n//             </div>\r\n//           </div>\r\n//           {fileType === 'image' && (\r\n//             <img\r\n//               src={`https://gateway.pinata.cloud/ipfs/${file.hash}`}\r\n//               alt=\"preview\"\r\n//               className=\"w-16 h-16 object-cover rounded\"\r\n//             />\r\n//           )}\r\n//         </a>\r\n//       </div>\r\n//     );\r\n//   };\r\n\r\n//   const getdata = async () => {\r\n//     setLoading(true);\r\n//     let dataArray;\r\n//     const Otheraddress = document.querySelector(\".address\").value;\r\n    \r\n//     try {\r\n//       if (Otheraddress) {\r\n//         dataArray = await contract.display(Otheraddress);\r\n//       } else {\r\n//         dataArray = await contract.display(account);\r\n//       }\r\n//     } catch (e) {\r\n//       alert(\"You don't have access\");\r\n//       setLoading(false);\r\n//       return;\r\n//     }\r\n\r\n//     const isEmpty = Object.keys(dataArray).length === 0;\r\n\r\n//     if (!isEmpty) {\r\n//       const str = dataArray.toString();\r\n//       const str_array = str.split(\",\");\r\n      \r\n//       const files = str_array.map((item) => ({\r\n//         url: item,\r\n//         hash: item.substring(6)  // Remove 'ipfs://' prefix\r\n//       }));\r\n\r\n//       const fileElements = files.map((file, i) => (\r\n//         <FileItem key={i} file={file} />\r\n//       ));\r\n\r\n//       setData(fileElements);\r\n//     } else {\r\n//       alert(\"No files to display\");\r\n//     }\r\n//     setLoading(false);\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"p-4\">\r\n//       <div className=\"grid grid-cols-1 gap-4 mb-4\">\r\n//         {data}\r\n//       </div>\r\n//       <div className=\"flex gap-2 items-center justify-center\">\r\n//         <input\r\n//           type=\"text\"\r\n//           placeholder=\"Enter Address\"\r\n//           className=\"address p-2 border rounded w-80\"\r\n//         />\r\n//         <button\r\n//           className=\"flex items-center gap-2 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 disabled:bg-blue-300 disabled:cursor-not-allowed transition-colors\"\r\n//           onClick={getdata}\r\n//           disabled={loading}\r\n//         >\r\n//           {loading && <Loader2 className=\"animate-spin\" size={16} />}\r\n//           Get Data\r\n//         </button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Display;\r\n\r\n\r\nimport { useState } from \"react\";\r\nimport \"./Display.css\";\r\nconst Display = ({ contract, account }) => {\r\n  const [data, setData] = useState(\"\");\r\n  const getdata = async () => {\r\n    let dataArray;\r\n    const Otheraddress = document.querySelector(\".address\").value;\r\n    try {\r\n      if (Otheraddress) {\r\n        dataArray = await contract.display(Otheraddress);\r\n        console.log(dataArray);\r\n      } else {\r\n        dataArray = await contract.display(account);\r\n      }\r\n    } catch (e) {\r\n      alert(\"You don't have access\");\r\n    }\r\n    const isEmpty = Object.keys(dataArray).length === 0;\r\n\r\n    if (!isEmpty) {\r\n      const str = dataArray.toString();\r\n      const str_array = str.split(\",\");\r\n      // console.log(str);\r\n      // console.log(str_array);\r\n      const images = str_array.map((item, i) => {\r\n        return (\r\n          <a href={item} key={i} target=\"_blank\">\r\n            <img\r\n              key={i}\r\n              src={`https://gateway.pinata.cloud/ipfs/${item.substring(6)}`}\r\n              alt=\"new\"\r\n              className=\"image-list\"\r\n            ></img>\r\n          </a>\r\n        );\r\n      });\r\n      setData(images);\r\n    } else {\r\n      alert(\"No image to display\");\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"image-list\">{data}</div>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Enter Address\"\r\n        className=\"address\"\r\n      ></input>\r\n      <button className=\"center button\" onClick={getdata}>\r\n        Get Data\r\n      </button>\r\n    </>\r\n  );\r\n};\r\nexport default Display;\r\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAO,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACvB,MAAMC,OAAO,GAAGA,CAAC;EAAEC,QAAQ;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EACzC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAMW,OAAO,GAAG,MAAAA,CAAA,KAAY;IAC1B,IAAIC,SAAS;IACb,MAAMC,YAAY,GAAGC,QAAQ,CAACC,aAAa,CAAC,UAAU,CAAC,CAACC,KAAK;IAC7D,IAAI;MACF,IAAIH,YAAY,EAAE;QAChBD,SAAS,GAAG,MAAMN,QAAQ,CAACW,OAAO,CAACJ,YAAY,CAAC;QAChDK,OAAO,CAACC,GAAG,CAACP,SAAS,CAAC;MACxB,CAAC,MAAM;QACLA,SAAS,GAAG,MAAMN,QAAQ,CAACW,OAAO,CAACV,OAAO,CAAC;MAC7C;IACF,CAAC,CAAC,OAAOa,CAAC,EAAE;MACVC,KAAK,CAAC,uBAAuB,CAAC;IAChC;IACA,MAAMC,OAAO,GAAGC,MAAM,CAACC,IAAI,CAACZ,SAAS,CAAC,CAACa,MAAM,KAAK,CAAC;IAEnD,IAAI,CAACH,OAAO,EAAE;MACZ,MAAMI,GAAG,GAAGd,SAAS,CAACe,QAAQ,CAAC,CAAC;MAChC,MAAMC,SAAS,GAAGF,GAAG,CAACG,KAAK,CAAC,GAAG,CAAC;MAChC;MACA;MACA,MAAMC,MAAM,GAAGF,SAAS,CAACG,GAAG,CAAC,CAACC,IAAI,EAAEC,CAAC,KAAK;QACxC,oBACE/B,OAAA;UAAGgC,IAAI,EAAEF,IAAK;UAASG,MAAM,EAAC,QAAQ;UAAAC,QAAA,eACpClC,OAAA;YAEEmC,GAAG,EAAE,qCAAqCL,IAAI,CAACM,SAAS,CAAC,CAAC,CAAC,EAAG;YAC9DC,GAAG,EAAC,KAAK;YACTC,SAAS,EAAC;UAAY,GAHjBP,CAAC;YAAAQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAIF;QAAC,GANWX,CAAC;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAOlB,CAAC;MAER,CAAC,CAAC;MACFlC,OAAO,CAACoB,MAAM,CAAC;IACjB,CAAC,MAAM;MACLT,KAAK,CAAC,qBAAqB,CAAC;IAC9B;EACF,CAAC;EACD,oBACEnB,OAAA,CAAAE,SAAA;IAAAgC,QAAA,gBACElC,OAAA;MAAKsC,SAAS,EAAC,YAAY;MAAAJ,QAAA,EAAE3B;IAAI;MAAAgC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACxC1C,OAAA;MACE2C,IAAI,EAAC,MAAM;MACXC,WAAW,EAAC,eAAe;MAC3BN,SAAS,EAAC;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACb,CAAC,eACT1C,OAAA;MAAQsC,SAAS,EAAC,eAAe;MAACO,OAAO,EAAEpC,OAAQ;MAAAyB,QAAA,EAAC;IAEpD;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA,eACT,CAAC;AAEP,CAAC;AAACpC,EAAA,CApDIH,OAAO;AAAA2C,EAAA,GAAP3C,OAAO;AAqDb,eAAeA,OAAO;AAAC,IAAA2C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}