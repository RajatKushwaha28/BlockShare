{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\acer\\\\Documents\\\\BlockShare\\\\client\\\\src\\\\components\\\\FileUpload.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport \"./FileUpload.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FileUpload = ({\n  contract,\n  account,\n  provider\n}) => {\n  _s();\n  const [file, setFile] = useState(null);\n  const [fileName, setFileName] = useState(\"No image selected\");\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (file) {\n      try {\n        const formData = new FormData();\n        formData.append(\"file\", file);\n        const resFile = await axios({\n          method: \"post\",\n          url: \"https://api.pinata.cloud/pinning/pinFileToIPFS\",\n          data: formData,\n          headers: {\n            pinata_api_key: `8c1e13692b8e9a6b9aef`,\n            pinata_secret_api_key: `993584c4f6547e2d232df5392549123b31ba1baebbdb3c8cacee12ca5554f0fb`,\n            \"Content-Type\": \"multipart/form-data\"\n          }\n        });\n        const ImgHash = `https://gateway.pinata.cloud/ipfs/${resFile.data.IpfsHash}`;\n\n        // Call the add function with both IPFS hash and file name\n        await contract.add(account, ImgHash, file.name);\n        alert(\"Successfully Image Uploaded\");\n        setFileName(\"No image selected\");\n        setFile(null);\n      } catch (e) {\n        alert(\"Unable to upload image to Pinata\");\n        console.error(e);\n      }\n    }\n  };\n  const retrieveFile = e => {\n    const data = e.target.files[0]; // files array of files object\n    const reader = new window.FileReader();\n    reader.readAsArrayBuffer(data);\n    reader.onloadend = () => {\n      setFile(data); // Set the file correctly\n    };\n    setFileName(data.name); // Correctly set the file name\n    e.preventDefault();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"top\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"file-upload\",\n        className: \"choose\",\n        children: \"Choose Image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        disabled: !account,\n        type: \"file\",\n        id: \"file-upload\",\n        name: \"data\",\n        onChange: retrieveFile\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"textArea\",\n        children: [\"Image: \", fileName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"upload\",\n        disabled: !file,\n        children: \"Upload File\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(FileUpload, \"iogOrXrY+NbnG1T+Sl+25rviPM0=\");\n_c = FileUpload;\nexport default FileUpload;\n\n// import { useState } from \"react\";\n// import axios from \"axios\";\n// import \"./FileUpload.css\";\n// const FileUpload = ({ contract, account, provider }) => {\n//   const [file, setFile] = useState(null);\n//   const [fileName, setFileName] = useState(\"No image selected\");\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     if (file) {\n//       try {\n//         const formData = new FormData();\n//         formData.append(\"file\", file);\n\n//         const resFile = await axios({\n//           method: \"post\",\n//           url: \"https://api.pinata.cloud/pinning/pinFileToIPFS\",\n//           data: formData,\n//           headers: {\n//             pinata_api_key: `8c1e13692b8e9a6b9aef`,\n//             pinata_secret_api_key: `993584c4f6547e2d232df5392549123b31ba1baebbdb3c8cacee12ca5554f0fb`,\n//             \"Content-Type\": \"multipart/form-data\",\n//           },\n//         });\n//         const ImgHash = `https://gateway.pinata.cloud/ipfs/${resFile.data.IpfsHash}`;\n//         contract.add(account,ImgHash);\n//         alert(\"Successfully Image Uploaded\");\n//         setFileName(\"No image selected\");\n//         setFile(null);\n//       } catch (e) {\n//         alert(\"Unable to upload image to Pinata\");\n//       }\n//     }\n//     alert(\"Successfully Image Uploaded\");\n//     setFileName(\"No image selected\");\n//     setFile(null);\n//   };\n//   const retrieveFile = (e) => {\n//     const data = e.target.files[0]; //files array of files object\n//     // console.log(data);\n//     const reader = new window.FileReader();\n//     reader.readAsArrayBuffer(data);\n//     reader.onloadend = () => {\n//       setFile(e.target.files[0]);\n//     };\n//     setFileName(e.target.files[0].name);\n//     e.preventDefault();\n//   };\n//   return (\n//     <div className=\"top\">\n//       <form className=\"form\" onSubmit={handleSubmit}>\n//         <label htmlFor=\"file-upload\" className=\"choose\">\n//           Choose Image\n//         </label>\n//         <input\n//           disabled={!account}\n//           type=\"file\"\n//           id=\"file-upload\"\n//           name=\"data\"\n//           onChange={retrieveFile}\n//         />\n//         <span className=\"textArea\">Image: {fileName}</span>\n//         <button type=\"submit\" className=\"upload\" disabled={!file}>\n//           Upload File\n//         </button>\n//       </form>\n//     </div>\n//   );\n// };\n// export default FileUpload;\n// // import { useState } from \"react\";\n// // import axios from \"axios\";\n// // import \"./FileUpload.css\";\n\n// // const FileUpload = ({ contract, account, provider }) => {\n// //   const [file, setFile] = useState(null);\n// //   const [fileName, setFileName] = useState(\"No image selected\");\n\n// //   const handleSubmit = async (e) => {\n// //     e.preventDefault();\n// //     if (!contract || !account) {\n// //       alert(\"Contract or account is not loaded. Please check your connection.\");\n// //       return;\n// //     }\n\n// //     if (file) {\n// //       try {\n// //         const formData = new FormData();\n// //         formData.append(\"file\", file);\n\n// //         const resFile = await axios({\n// //           method: \"post\",\n// //           url: \"https://api.pinata.cloud/pinning/pinFileToIPFS\",\n// //           data: formData,\n// //           headers: {\n// //             pinata_api_key: `8c1e13692b8e9a6b9aef`,\n// //             pinata_secret_api_key: `993584c4f6547e2d232df5392549123b31ba1baebbdb3c8cacee12ca5554f0fb`,\n// //             \"Content-Type\": \"multipart/form-data\",\n// //           },\n// //         });\n\n// //         const ImgHash = `https://gateway.pinata.cloud/ipfs/${resFile.data.IpfsHash}`;\n\n// //         // Ensure contract methods are available before calling\n// //         await contract.methods.add(account, ImgHash, file.name).send({ from: account });\n\n// //         alert(\"Successfully Image Uploaded\");\n// //         setFileName(\"No image selected\");\n// //         setFile(null);\n// //       } catch (e) {\n// //         alert(\"Unable to upload image to Pinata\");\n// //         console.error(e);\n// //       }\n// //     }\n// //   };\n\n// //   const retrieveFile = (e) => {\n// //     const data = e.target.files[0];\n// //     const reader = new window.FileReader();\n// //     reader.readAsArrayBuffer(data);\n// //     reader.onloadend = () => {\n// //       setFile(e.target.files[0]);\n// //     };\n// //     setFileName(e.target.files[0].name);\n// //     e.preventDefault();\n// //   };\n\n// //   return (\n// //     <div className=\"top\">\n// //       <form className=\"form\" onSubmit={handleSubmit}>\n// //         <label htmlFor=\"file-upload\" className=\"choose\">\n// //           Choose Image\n// //         </label>\n// //         <input\n// //           disabled={!account}\n// //           type=\"file\"\n// //           id=\"file-upload\"\n// //           name=\"data\"\n// //           onChange={retrieveFile}\n// //         />\n// //         <span className=\"textArea\">Image: {fileName}</span>\n// //         <button type=\"submit\" className=\"upload\" disabled={!file}>\n// //           Upload File\n// //         </button>\n// //       </form>\n// //     </div>\n// //   );\n// // };\n\n// // export default FileUpload;\nvar _c;\n$RefreshReg$(_c, \"FileUpload\");","map":{"version":3,"names":["useState","axios","jsxDEV","_jsxDEV","FileUpload","contract","account","provider","_s","file","setFile","fileName","setFileName","handleSubmit","e","preventDefault","formData","FormData","append","resFile","method","url","data","headers","pinata_api_key","pinata_secret_api_key","ImgHash","IpfsHash","add","name","alert","console","error","retrieveFile","target","files","reader","window","FileReader","readAsArrayBuffer","onloadend","className","children","onSubmit","htmlFor","_jsxFileName","lineNumber","columnNumber","disabled","type","id","onChange","_c","$RefreshReg$"],"sources":["C:/Users/acer/Documents/BlockShare/client/src/components/FileUpload.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./FileUpload.css\";\r\n\r\nconst FileUpload = ({ contract, account, provider }) => {\r\n  const [file, setFile] = useState(null);\r\n  const [fileName, setFileName] = useState(\"No image selected\");\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (file) {\r\n      try {\r\n        const formData = new FormData();\r\n        formData.append(\"file\", file);\r\n\r\n        const resFile = await axios({\r\n          method: \"post\",\r\n          url: \"https://api.pinata.cloud/pinning/pinFileToIPFS\",\r\n          data: formData,\r\n          headers: {\r\n            pinata_api_key: `8c1e13692b8e9a6b9aef`,\r\n            pinata_secret_api_key: `993584c4f6547e2d232df5392549123b31ba1baebbdb3c8cacee12ca5554f0fb`,\r\n            \"Content-Type\": \"multipart/form-data\",\r\n          },\r\n        });\r\n\r\n        const ImgHash = `https://gateway.pinata.cloud/ipfs/${resFile.data.IpfsHash}`;\r\n        \r\n        // Call the add function with both IPFS hash and file name\r\n        await contract.add(account, ImgHash, file.name);\r\n\r\n        alert(\"Successfully Image Uploaded\");\r\n        setFileName(\"No image selected\");\r\n        setFile(null);\r\n      } catch (e) {\r\n        alert(\"Unable to upload image to Pinata\");\r\n        console.error(e);\r\n      }\r\n    }\r\n  };\r\n\r\n  const retrieveFile = (e) => {\r\n    const data = e.target.files[0]; // files array of files object\r\n    const reader = new window.FileReader();\r\n    reader.readAsArrayBuffer(data);\r\n    reader.onloadend = () => {\r\n      setFile(data); // Set the file correctly\r\n    };\r\n    setFileName(data.name); // Correctly set the file name\r\n    e.preventDefault();\r\n  };\r\n\r\n  return (\r\n    <div className=\"top\">\r\n      <form className=\"form\" onSubmit={handleSubmit}>\r\n        <label htmlFor=\"file-upload\" className=\"choose\">\r\n          Choose Image\r\n        </label>\r\n        <input\r\n          disabled={!account}\r\n          type=\"file\"\r\n          id=\"file-upload\"\r\n          name=\"data\"\r\n          onChange={retrieveFile}\r\n        />\r\n        <span className=\"textArea\">Image: {fileName}</span>\r\n        <button type=\"submit\" className=\"upload\" disabled={!file}>\r\n          Upload File\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FileUpload;\r\n\r\n// import { useState } from \"react\";\r\n// import axios from \"axios\";\r\n// import \"./FileUpload.css\";\r\n// const FileUpload = ({ contract, account, provider }) => {\r\n//   const [file, setFile] = useState(null);\r\n//   const [fileName, setFileName] = useState(\"No image selected\");\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n//     if (file) {\r\n//       try {\r\n//         const formData = new FormData();\r\n//         formData.append(\"file\", file);\r\n\r\n//         const resFile = await axios({\r\n//           method: \"post\",\r\n//           url: \"https://api.pinata.cloud/pinning/pinFileToIPFS\",\r\n//           data: formData,\r\n//           headers: {\r\n//             pinata_api_key: `8c1e13692b8e9a6b9aef`,\r\n//             pinata_secret_api_key: `993584c4f6547e2d232df5392549123b31ba1baebbdb3c8cacee12ca5554f0fb`,\r\n//             \"Content-Type\": \"multipart/form-data\",\r\n//           },\r\n//         });\r\n//         const ImgHash = `https://gateway.pinata.cloud/ipfs/${resFile.data.IpfsHash}`;\r\n//         contract.add(account,ImgHash);\r\n//         alert(\"Successfully Image Uploaded\");\r\n//         setFileName(\"No image selected\");\r\n//         setFile(null);\r\n//       } catch (e) {\r\n//         alert(\"Unable to upload image to Pinata\");\r\n//       }\r\n//     }\r\n//     alert(\"Successfully Image Uploaded\");\r\n//     setFileName(\"No image selected\");\r\n//     setFile(null);\r\n//   };\r\n//   const retrieveFile = (e) => {\r\n//     const data = e.target.files[0]; //files array of files object\r\n//     // console.log(data);\r\n//     const reader = new window.FileReader();\r\n//     reader.readAsArrayBuffer(data);\r\n//     reader.onloadend = () => {\r\n//       setFile(e.target.files[0]);\r\n//     };\r\n//     setFileName(e.target.files[0].name);\r\n//     e.preventDefault();\r\n//   };\r\n//   return (\r\n//     <div className=\"top\">\r\n//       <form className=\"form\" onSubmit={handleSubmit}>\r\n//         <label htmlFor=\"file-upload\" className=\"choose\">\r\n//           Choose Image\r\n//         </label>\r\n//         <input\r\n//           disabled={!account}\r\n//           type=\"file\"\r\n//           id=\"file-upload\"\r\n//           name=\"data\"\r\n//           onChange={retrieveFile}\r\n//         />\r\n//         <span className=\"textArea\">Image: {fileName}</span>\r\n//         <button type=\"submit\" className=\"upload\" disabled={!file}>\r\n//           Upload File\r\n//         </button>\r\n//       </form>\r\n//     </div>\r\n//   );\r\n// };\r\n// export default FileUpload;\r\n// // import { useState } from \"react\";\r\n// // import axios from \"axios\";\r\n// // import \"./FileUpload.css\";\r\n\r\n// // const FileUpload = ({ contract, account, provider }) => {\r\n// //   const [file, setFile] = useState(null);\r\n// //   const [fileName, setFileName] = useState(\"No image selected\");\r\n\r\n// //   const handleSubmit = async (e) => {\r\n// //     e.preventDefault();\r\n// //     if (!contract || !account) {\r\n// //       alert(\"Contract or account is not loaded. Please check your connection.\");\r\n// //       return;\r\n// //     }\r\n\r\n// //     if (file) {\r\n// //       try {\r\n// //         const formData = new FormData();\r\n// //         formData.append(\"file\", file);\r\n\r\n// //         const resFile = await axios({\r\n// //           method: \"post\",\r\n// //           url: \"https://api.pinata.cloud/pinning/pinFileToIPFS\",\r\n// //           data: formData,\r\n// //           headers: {\r\n// //             pinata_api_key: `8c1e13692b8e9a6b9aef`,\r\n// //             pinata_secret_api_key: `993584c4f6547e2d232df5392549123b31ba1baebbdb3c8cacee12ca5554f0fb`,\r\n// //             \"Content-Type\": \"multipart/form-data\",\r\n// //           },\r\n// //         });\r\n\r\n// //         const ImgHash = `https://gateway.pinata.cloud/ipfs/${resFile.data.IpfsHash}`;\r\n\r\n// //         // Ensure contract methods are available before calling\r\n// //         await contract.methods.add(account, ImgHash, file.name).send({ from: account });\r\n\r\n// //         alert(\"Successfully Image Uploaded\");\r\n// //         setFileName(\"No image selected\");\r\n// //         setFile(null);\r\n// //       } catch (e) {\r\n// //         alert(\"Unable to upload image to Pinata\");\r\n// //         console.error(e);\r\n// //       }\r\n// //     }\r\n// //   };\r\n\r\n// //   const retrieveFile = (e) => {\r\n// //     const data = e.target.files[0];\r\n// //     const reader = new window.FileReader();\r\n// //     reader.readAsArrayBuffer(data);\r\n// //     reader.onloadend = () => {\r\n// //       setFile(e.target.files[0]);\r\n// //     };\r\n// //     setFileName(e.target.files[0].name);\r\n// //     e.preventDefault();\r\n// //   };\r\n\r\n// //   return (\r\n// //     <div className=\"top\">\r\n// //       <form className=\"form\" onSubmit={handleSubmit}>\r\n// //         <label htmlFor=\"file-upload\" className=\"choose\">\r\n// //           Choose Image\r\n// //         </label>\r\n// //         <input\r\n// //           disabled={!account}\r\n// //           type=\"file\"\r\n// //           id=\"file-upload\"\r\n// //           name=\"data\"\r\n// //           onChange={retrieveFile}\r\n// //         />\r\n// //         <span className=\"textArea\">Image: {fileName}</span>\r\n// //         <button type=\"submit\" className=\"upload\" disabled={!file}>\r\n// //           Upload File\r\n// //         </button>\r\n// //       </form>\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// // export default FileUpload;\r\n"],"mappings":"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eAAeA,UAAU;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAgD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}