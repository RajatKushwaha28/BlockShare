{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\acer\\\\Documents\\\\BlockShare\\\\client\\\\src\\\\components\\\\Display.js\",\n  _s = $RefreshSig$();\n// import { useState } from \"react\";\n// import \"./Display.css\";\n\n// const Display = ({ contract, account }) => {\n//   const [data, setData] = useState([]);\n\n//   const getdata = async () => {\n//     let dataArray;\n//     const Otheraddress = document.querySelector(\".address\").value;\n//     try {\n//       if (Otheraddress) {\n//         dataArray = await contract.display(Otheraddress);\n//       } else {\n//         dataArray = await contract.display(account);\n//       }\n//     } catch (e) {\n//       alert(\"You don't have access\");\n//       return; // Exit the function if there's an error\n//     }\n\n//     if (dataArray.length > 0) {\n//       const items = dataArray.map((item, i) => {\n//         const isImage = item.fileName.match(/\\.(jpeg|jpg|gif|png)$/i);\n//         const isPdf = item.fileName.match(/\\.pdf$/i);\n\n//         return (\n//           <div key={i} className=\"file-item\">\n//             {isImage ? (\n//               <a href={item.url} target=\"_blank\" rel=\"noopener noreferrer\">\n//                 <img src={item.url} alt={item.fileName} className=\"image-list\" />\n//               </a>\n//             ) : isPdf ? (\n//               <a href={item.url} target=\"_blank\" rel=\"noopener noreferrer\">\n//                 <img\n//                   src=\"https://cdn-icons-png.freepik.com/256/16425/16425681.png?semt=ais_hybrid\" \n//                   alt={item.fileName}\n//                   className=\"pdf-icon\"\n//                 />\n//               </a>\n//             ) : (\n//               <div>\n//                 <p>Unsupported file type: {item.fileName}</p>\n//               </div>\n//             )}\n//             <p>{item.fileName}</p> {/* Display the file name */}\n//           </div>\n//         );\n//       });\n//       setData(items);\n//     } else {\n//       alert(\"No image to display\");\n//     }\n//   };\n\n//   return (\n//     <>\n//       <div className=\"file-list\">{data}</div>\n//       <input type=\"text\" placeholder=\"Enter Address\" className=\"address\" />\n//       <button className=\"center button\" onClick={getdata}>\n//         Get Data\n//       </button>\n//     </>\n//   );\n// };\n\n// export default Display;\n\nimport { useState } from \"react\";\nimport \"./Display.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Display = ({\n  contract,\n  account\n}) => {\n  _s();\n  const [data, setData] = useState({});\n  const [otherAddress, setOtherAddress] = useState(\"\");\n  const getData = async () => {\n    let dataArray;\n    const addressToFetch = otherAddress || account; // Use otherAddress if provided, otherwise use account\n\n    try {\n      dataArray = await contract.display(addressToFetch);\n    } catch (e) {\n      alert(\"You don't have access\");\n      return; // Exit the function if there's an error\n    }\n    if (dataArray.length > 0) {\n      // Update the state to include files for the specified address\n      setData(prevData => ({\n        ...prevData,\n        [addressToFetch]: dataArray // Map the address to its files\n      }));\n    } else {\n      alert(\"No files to display\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"file-list\",\n      children: Object.keys(data).map(user => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"user-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Files from \", user]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }, this), data[user].map((item, i) => {\n          const isImage = item.fileName.match(/\\.(jpeg|jpg|gif|png)$/i);\n          const isPdf = item.fileName.match(/\\.pdf$/i);\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"file-item\",\n            children: [isImage ? /*#__PURE__*/_jsxDEV(\"a\", {\n              href: item.url,\n              target: \"_blank\",\n              rel: \"noopener noreferrer\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: item.url,\n                alt: item.fileName,\n                className: \"image-list\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 111,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 21\n            }, this) : isPdf ? /*#__PURE__*/_jsxDEV(\"a\", {\n              href: item.url,\n              target: \"_blank\",\n              rel: \"noopener noreferrer\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: \"https://cdn-icons-png.freepik.com/256/16425/16425681.png?semt=ais_hybrid\",\n                alt: item.fileName,\n                className: \"pdf-icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 115,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 21\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Unsupported file type: \", item.fileName]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 123,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: item.fileName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 19\n            }, this), \" \"]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 17\n          }, this);\n        })]\n      }, user, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter Address\",\n      className: \"address\",\n      value: otherAddress,\n      onChange: e => setOtherAddress(e.target.value) // Update state on input change\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"center button\",\n      onClick: getData,\n      children: \"Get Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Display, \"6nXNLpGOjSGQgeoP3IHweP7AJpQ=\");\n_c = Display;\nexport default Display;\nvar _c;\n$RefreshReg$(_c, \"Display\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Display","contract","account","_s","data","setData","otherAddress","setOtherAddress","getData","dataArray","addressToFetch","display","e","alert","length","prevData","children","className","Object","keys","map","user","fileName","_jsxFileName","lineNumber","columnNumber","item","i","isImage","match","isPdf","href","url","target","rel","src","alt","type","placeholder","value","onChange","onClick","_c","$RefreshReg$"],"sources":["C:/Users/acer/Documents/BlockShare/client/src/components/Display.js"],"sourcesContent":["// import { useState } from \"react\";\r\n// import \"./Display.css\";\r\n\r\n// const Display = ({ contract, account }) => {\r\n//   const [data, setData] = useState([]);\r\n\r\n//   const getdata = async () => {\r\n//     let dataArray;\r\n//     const Otheraddress = document.querySelector(\".address\").value;\r\n//     try {\r\n//       if (Otheraddress) {\r\n//         dataArray = await contract.display(Otheraddress);\r\n//       } else {\r\n//         dataArray = await contract.display(account);\r\n//       }\r\n//     } catch (e) {\r\n//       alert(\"You don't have access\");\r\n//       return; // Exit the function if there's an error\r\n//     }\r\n\r\n//     if (dataArray.length > 0) {\r\n//       const items = dataArray.map((item, i) => {\r\n//         const isImage = item.fileName.match(/\\.(jpeg|jpg|gif|png)$/i);\r\n//         const isPdf = item.fileName.match(/\\.pdf$/i);\r\n\r\n//         return (\r\n//           <div key={i} className=\"file-item\">\r\n//             {isImage ? (\r\n//               <a href={item.url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n//                 <img src={item.url} alt={item.fileName} className=\"image-list\" />\r\n//               </a>\r\n//             ) : isPdf ? (\r\n//               <a href={item.url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n//                 <img\r\n//                   src=\"https://cdn-icons-png.freepik.com/256/16425/16425681.png?semt=ais_hybrid\" \r\n//                   alt={item.fileName}\r\n//                   className=\"pdf-icon\"\r\n//                 />\r\n//               </a>\r\n//             ) : (\r\n//               <div>\r\n//                 <p>Unsupported file type: {item.fileName}</p>\r\n//               </div>\r\n//             )}\r\n//             <p>{item.fileName}</p> {/* Display the file name */}\r\n//           </div>\r\n//         );\r\n//       });\r\n//       setData(items);\r\n//     } else {\r\n//       alert(\"No image to display\");\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//       <div className=\"file-list\">{data}</div>\r\n//       <input type=\"text\" placeholder=\"Enter Address\" className=\"address\" />\r\n//       <button className=\"center button\" onClick={getdata}>\r\n//         Get Data\r\n//       </button>\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default Display;\r\n\r\nimport { useState } from \"react\";\r\nimport \"./Display.css\";\r\n\r\nconst Display = ({ contract, account }) => {\r\n  const [data, setData] = useState({});\r\n  const [otherAddress, setOtherAddress] = useState(\"\");\r\n\r\n  const getData = async () => {\r\n    let dataArray;\r\n    const addressToFetch = otherAddress || account; // Use otherAddress if provided, otherwise use account\r\n\r\n    try {\r\n      dataArray = await contract.display(addressToFetch);\r\n    } catch (e) {\r\n      alert(\"You don't have access\");\r\n      return; // Exit the function if there's an error\r\n    }\r\n\r\n    if (dataArray.length > 0) {\r\n      // Update the state to include files for the specified address\r\n      setData((prevData) => ({\r\n        ...prevData,\r\n        [addressToFetch]: dataArray, // Map the address to its files\r\n      }));\r\n    } else {\r\n      alert(\"No files to display\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"file-list\">\r\n        {Object.keys(data).map((user) => (\r\n          <div key={user} className=\"user-section\">\r\n            <h3>Files from {user}</h3>\r\n            {data[user].map((item, i) => {\r\n              const isImage = item.fileName.match(/\\.(jpeg|jpg|gif|png)$/i);\r\n              const isPdf = item.fileName.match(/\\.pdf$/i);\r\n\r\n              return (\r\n                <div key={i} className=\"file-item\">\r\n                  {isImage ? (\r\n                    <a href={item.url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                      <img src={item.url} alt={item.fileName} className=\"image-list\" />\r\n                    </a>\r\n                  ) : isPdf ? (\r\n                    <a href={item.url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                      <img\r\n                        src=\"https://cdn-icons-png.freepik.com/256/16425/16425681.png?semt=ais_hybrid\"\r\n                        alt={item.fileName}\r\n                        className=\"pdf-icon\"\r\n                      />\r\n                    </a>\r\n                  ) : (\r\n                    <div>\r\n                      <p>Unsupported file type: {item.fileName}</p>\r\n                    </div>\r\n                  )}\r\n                  <p>{item.fileName}</p> {/* Display the file name */}\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Enter Address\"\r\n        className=\"address\"\r\n        value={otherAddress}\r\n        onChange={(e) => setOtherAddress(e.target.value)} // Update state on input change\r\n      />\r\n      <button className=\"center button\" onClick={getData}>\r\n        Get Data\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Display;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}