{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\acer\\\\Documents\\\\BlockShare\\\\client\\\\src\\\\components\\\\Display.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { File } from \"lucide-react\";\nimport \"./Display.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Display = ({\n  contract,\n  account\n}) => {\n  _s();\n  const [data, setData] = useState(\"\");\n  const getFileTypeIcon = url => {\n    // Extract file extension from IPFS hash or full URL\n    const extension = url.split('.').pop().toLowerCase();\n\n    // All files use the same icon but we still determine if we should show preview\n    const showPreview = ['jpg', 'jpeg', 'png', 'gif'].includes(extension);\n    return {\n      icon: /*#__PURE__*/_jsxDEV(File, {\n        size: 24,\n        className: \"mb-2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 13\n      }, this),\n      showPreview\n    };\n  };\n  const getdata = async () => {\n    let dataArray;\n    const Otheraddress = document.querySelector(\".address\").value;\n    try {\n      if (Otheraddress) {\n        dataArray = await contract.display(Otheraddress);\n      } else {\n        dataArray = await contract.display(account);\n      }\n    } catch (e) {\n      alert(\"You don't have access\");\n      return;\n    }\n    const isEmpty = Object.keys(dataArray).length === 0;\n    if (!isEmpty) {\n      const str = dataArray.toString();\n      const str_array = str.split(\",\");\n      const files = str_array.map((item, i) => {\n        const {\n          icon,\n          showPreview\n        } = getFileTypeIcon(item);\n        const ipfsHash = item.substring(6);\n        const ipfsUrl = `https://gateway.pinata.cloud/ipfs/${ipfsHash}`;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex flex-col items-center p-4 m-2 border rounded hover:shadow-lg transition-shadow\",\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            href: item,\n            target: \"_blank\",\n            rel: \"noopener noreferrer\",\n            className: \"flex flex-col items-center text-center\",\n            children: [icon, showPreview ? /*#__PURE__*/_jsxDEV(\"img\", {\n              src: ipfsUrl,\n              alt: \"File preview\",\n              className: \"w-24 h-24 object-cover rounded\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"mt-2 text-sm text-gray-600\",\n              children: [ipfsHash.substring(0, 8), \"...\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 13\n          }, this)\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this);\n      });\n      setData(files);\n    } else {\n      alert(\"No files to display\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4\",\n      children: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-6 flex justify-center gap-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter Address\",\n        className: \"address px-4 py-2 border rounded\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"px-6 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors\",\n        onClick: getdata,\n        children: \"Get Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n_s(Display, \"avaWeDctHFwWP+lC5+N1mkv/uq8=\");\n_c = Display;\nexport default Display;\n\n// import { useState } from \"react\";\n// import \"./Display.css\";\n// const Display = ({ contract, account }) => {\n//   const [data, setData] = useState(\"\");\n//   const getdata = async () => {\n//     let dataArray;\n//     const Otheraddress = document.querySelector(\".address\").value;\n//     try {\n//       if (Otheraddress) {\n//         dataArray = await contract.display(Otheraddress);\n//         console.log(dataArray);\n//       } else {\n//         dataArray = await contract.display(account);\n//       }\n//     } catch (e) {\n//       alert(\"You don't have access\");\n//     }\n//     const isEmpty = Object.keys(dataArray).length === 0;\n\n//     if (!isEmpty) {\n//       const str = dataArray.toString();\n//       const str_array = str.split(\",\");\n//       // console.log(str);\n//       // console.log(str_array);\n//       const images = str_array.map((item, i) => {\n//         return (\n//           <a href={item} key={i} target=\"_blank\">\n//             <img\n//               key={i}\n//               src={`https://gateway.pinata.cloud/ipfs/${item.substring(6)}`}\n//               alt=\"new\"\n//               className=\"image-list\"\n//             ></img>\n//           </a>\n//         );\n//       });\n//       setData(images);\n//     } else {\n//       alert(\"No image to display\");\n//     }\n//   };\n//   return (\n//     <>\n//       <div className=\"image-list\">{data}</div>\n//       <input\n//         type=\"text\"\n//         placeholder=\"Enter Address\"\n//         className=\"address\"\n//       ></input>\n//       <button className=\"center button\" onClick={getdata}>\n//         Get Data\n//       </button>\n//     </>\n//   );\n// };\n// export default Display;\nvar _c;\n$RefreshReg$(_c, \"Display\");","map":{"version":3,"names":["useState","File","jsxDEV","_jsxDEV","Display","contract","account","_s","data","setData","getFileTypeIcon","url","extension","split","pop","toLowerCase","showPreview","includes","icon","size","className","fileName","_jsxFileName","lineNumber","columnNumber","getdata","dataArray","Otheraddress","document","querySelector","value","display","e","alert","isEmpty","Object","keys","length","str","toString","str_array","files","map","item","i","ipfsHash","substring","ipfsUrl","children","href","target","rel","src","alt","type","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/acer/Documents/BlockShare/client/src/components/Display.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport { File } from \"lucide-react\";\r\nimport \"./Display.css\";\r\n\r\nconst Display = ({ contract, account }) => {\r\n  const [data, setData] = useState(\"\");\r\n\r\n  const getFileTypeIcon = (url) => {\r\n    // Extract file extension from IPFS hash or full URL\r\n    const extension = url.split('.').pop().toLowerCase();\r\n    \r\n    // All files use the same icon but we still determine if we should show preview\r\n    const showPreview = ['jpg', 'jpeg', 'png', 'gif'].includes(extension);\r\n    \r\n    return {\r\n      icon: <File size={24} className=\"mb-2\" />,\r\n      showPreview\r\n    };\r\n  };\r\n\r\n  const getdata = async () => {\r\n    let dataArray;\r\n    const Otheraddress = document.querySelector(\".address\").value;\r\n    \r\n    try {\r\n      if (Otheraddress) {\r\n        dataArray = await contract.display(Otheraddress);\r\n      } else {\r\n        dataArray = await contract.display(account);\r\n      }\r\n    } catch (e) {\r\n      alert(\"You don't have access\");\r\n      return;\r\n    }\r\n\r\n    const isEmpty = Object.keys(dataArray).length === 0;\r\n\r\n    if (!isEmpty) {\r\n      const str = dataArray.toString();\r\n      const str_array = str.split(\",\");\r\n      \r\n      const files = str_array.map((item, i) => {\r\n        const { icon, showPreview } = getFileTypeIcon(item);\r\n        const ipfsHash = item.substring(6);\r\n        const ipfsUrl = `https://gateway.pinata.cloud/ipfs/${ipfsHash}`;\r\n\r\n        return (\r\n          <div key={i} className=\"flex flex-col items-center p-4 m-2 border rounded hover:shadow-lg transition-shadow\">\r\n            <a \r\n              href={item} \r\n              target=\"_blank\" \r\n              rel=\"noopener noreferrer\"\r\n              className=\"flex flex-col items-center text-center\"\r\n            >\r\n              {icon}\r\n              {showPreview ? (\r\n                <img\r\n                  src={ipfsUrl}\r\n                  alt=\"File preview\"\r\n                  className=\"w-24 h-24 object-cover rounded\"\r\n                />\r\n              ) : (\r\n                <span className=\"mt-2 text-sm text-gray-600\">\r\n                  {ipfsHash.substring(0, 8)}...\r\n                </span>\r\n              )}\r\n            </a>\r\n          </div>\r\n        );\r\n      });\r\n      \r\n      setData(files);\r\n    } else {\r\n      alert(\"No files to display\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-4\">\r\n      <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4\">\r\n        {data}\r\n      </div>\r\n      <div className=\"mt-6 flex justify-center gap-4\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Enter Address\"\r\n          className=\"address px-4 py-2 border rounded\"\r\n        />\r\n        <button\r\n          className=\"px-6 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors\"\r\n          onClick={getdata}\r\n        >\r\n          Get Data\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Display;\r\n\r\n\r\n\r\n// import { useState } from \"react\";\r\n// import \"./Display.css\";\r\n// const Display = ({ contract, account }) => {\r\n//   const [data, setData] = useState(\"\");\r\n//   const getdata = async () => {\r\n//     let dataArray;\r\n//     const Otheraddress = document.querySelector(\".address\").value;\r\n//     try {\r\n//       if (Otheraddress) {\r\n//         dataArray = await contract.display(Otheraddress);\r\n//         console.log(dataArray);\r\n//       } else {\r\n//         dataArray = await contract.display(account);\r\n//       }\r\n//     } catch (e) {\r\n//       alert(\"You don't have access\");\r\n//     }\r\n//     const isEmpty = Object.keys(dataArray).length === 0;\r\n\r\n//     if (!isEmpty) {\r\n//       const str = dataArray.toString();\r\n//       const str_array = str.split(\",\");\r\n//       // console.log(str);\r\n//       // console.log(str_array);\r\n//       const images = str_array.map((item, i) => {\r\n//         return (\r\n//           <a href={item} key={i} target=\"_blank\">\r\n//             <img\r\n//               key={i}\r\n//               src={`https://gateway.pinata.cloud/ipfs/${item.substring(6)}`}\r\n//               alt=\"new\"\r\n//               className=\"image-list\"\r\n//             ></img>\r\n//           </a>\r\n//         );\r\n//       });\r\n//       setData(images);\r\n//     } else {\r\n//       alert(\"No image to display\");\r\n//     }\r\n//   };\r\n//   return (\r\n//     <>\r\n//       <div className=\"image-list\">{data}</div>\r\n//       <input\r\n//         type=\"text\"\r\n//         placeholder=\"Enter Address\"\r\n//         className=\"address\"\r\n//       ></input>\r\n//       <button className=\"center button\" onClick={getdata}>\r\n//         Get Data\r\n//       </button>\r\n//     </>\r\n//   );\r\n// };\r\n// export default Display;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}