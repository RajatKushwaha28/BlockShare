{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\acer\\\\Documents\\\\BlockShare\\\\client\\\\src\\\\components\\\\Display.js\",\n  _s2 = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { Image, FileText, File, Loader2 } from \"lucide-react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Display = ({\n  contract,\n  account\n}) => {\n  _s2();\n  var _s = $RefreshSig$();\n  const [data, setData] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  // Improved file type detection\n  const detectFileType = async ipfsHash => {\n    try {\n      const url = `https://gateway.pinata.cloud/ipfs/${ipfsHash}`;\n      const response = await fetch(url, {\n        method: 'HEAD'\n      });\n      const contentType = response.headers.get('content-type');\n\n      // More comprehensive content type checking\n      if (contentType !== null && contentType !== void 0 && contentType.includes('image/') || (await isImage(url))) {\n        return 'image';\n      } else if (contentType !== null && contentType !== void 0 && contentType.includes('application/pdf') || (await isPDF(url))) {\n        return 'pdf';\n      }\n      return 'other';\n    } catch (error) {\n      console.error('Error detecting file type:', error);\n      return 'other';\n    }\n  };\n\n  // Helper function to check if URL points to an image\n  const isImage = async url => {\n    try {\n      const response = await fetch(url);\n      const blob = await response.blob();\n      return blob.type.startsWith('image/');\n    } catch {\n      return false;\n    }\n  };\n\n  // Helper function to check if URL points to a PDF\n  const isPDF = async url => {\n    try {\n      const response = await fetch(url);\n      const blob = await response.blob();\n      return blob.type === 'application/pdf';\n    } catch {\n      return false;\n    }\n  };\n  const FileItem = ({\n    file\n  }) => {\n    _s();\n    const [fileType, setFileType] = useState('unknown');\n    const [isLoading, setIsLoading] = useState(true);\n    useEffect(() => {\n      const determineFileType = async () => {\n        const type = await detectFileType(file.hash);\n        setFileType(type);\n        setIsLoading(false);\n      };\n      determineFileType();\n    }, [file]);\n    if (isLoading) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"file-item p-3 border rounded-lg\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center gap-2\",\n          children: [/*#__PURE__*/_jsxDEV(Loader2, {\n            className: \"animate-spin text-gray-400\",\n            size: 24\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-gray-500\",\n            children: \"Detecting file type...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"file-item p-3 border rounded-lg hover:bg-gray-50 transition-colors\",\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        href: `https://gateway.pinata.cloud/ipfs/${file.hash}`,\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        className: \"flex items-start gap-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: `icon-wrapper p-2 rounded-lg ${fileType === 'image' ? 'bg-green-100' : fileType === 'pdf' ? 'bg-red-100' : 'bg-blue-100'}`,\n          children: fileType === 'image' ? /*#__PURE__*/_jsxDEV(Image, {\n            className: \"text-green-500\",\n            size: 24\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 15\n          }, this) : fileType === 'pdf' ? /*#__PURE__*/_jsxDEV(FileText, {\n            className: \"text-red-500\",\n            size: 24\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(File, {\n            className: \"text-blue-500\",\n            size: 24\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex-grow\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: `font-medium ${fileType === 'image' ? 'text-green-700' : fileType === 'pdf' ? 'text-red-700' : 'text-blue-700'}`,\n            children: fileType === 'image' ? 'Image File' : fileType === 'pdf' ? 'PDF Document' : 'Unknown File'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-sm text-gray-500 truncate\",\n            children: [file.hash.substring(0, 20), \"...\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), fileType === 'image' && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: `https://gateway.pinata.cloud/ipfs/${file.hash}`,\n          alt: \"preview\",\n          className: \"w-16 h-16 object-cover rounded\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this);\n  };\n  _s(FileItem, \"eMhxVUEItUT0RtZSEAD+Eg6Avqk=\");\n  const getdata = async () => {\n    setLoading(true);\n    let dataArray;\n    const Otheraddress = document.querySelector(\".address\").value;\n    try {\n      if (Otheraddress) {\n        dataArray = await contract.display(Otheraddress);\n      } else {\n        dataArray = await contract.display(account);\n      }\n    } catch (e) {\n      alert(\"You don't have access\");\n      setLoading(false);\n      return;\n    }\n    const isEmpty = Object.keys(dataArray).length === 0;\n    if (!isEmpty) {\n      const str = dataArray.toString();\n      const str_array = str.split(\",\");\n      const files = str_array.map(item => ({\n        url: item,\n        hash: item.substring(6) // Remove 'ipfs://' prefix\n      }));\n      const fileElements = files.map((file, i) => /*#__PURE__*/_jsxDEV(FileItem, {\n        file: file\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this));\n      setData(fileElements);\n    } else {\n      alert(\"No files to display\");\n    }\n    setLoading(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-1 gap-4 mb-4\",\n      children: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex gap-2 items-center justify-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter Address\",\n        className: \"address p-2 border rounded w-80\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"flex items-center gap-2 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 disabled:bg-blue-300 disabled:cursor-not-allowed transition-colors\",\n        onClick: getdata,\n        disabled: loading,\n        children: [loading && /*#__PURE__*/_jsxDEV(Loader2, {\n          className: \"animate-spin\",\n          size: 16\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 23\n        }, this), \"Get Data\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 5\n  }, this);\n};\n_s2(Display, \"O++BGiCAraZPnoLxwfbNXXaJCW0=\");\n_c = Display;\nexport default Display;\n\n// import { useState } from \"react\";\n// import \"./Display.css\";\n// const Display = ({ contract, account }) => {\n//   const [data, setData] = useState(\"\");\n//   const getdata = async () => {\n//     let dataArray;\n//     const Otheraddress = document.querySelector(\".address\").value;\n//     try {\n//       if (Otheraddress) {\n//         dataArray = await contract.display(Otheraddress);\n//         console.log(dataArray);\n//       } else {\n//         dataArray = await contract.display(account);\n//       }\n//     } catch (e) {\n//       alert(\"You don't have access\");\n//     }\n//     const isEmpty = Object.keys(dataArray).length === 0;\n\n//     if (!isEmpty) {\n//       const str = dataArray.toString();\n//       const str_array = str.split(\",\");\n//       // console.log(str);\n//       // console.log(str_array);\n//       const images = str_array.map((item, i) => {\n//         return (\n//           <a href={item} key={i} target=\"_blank\">\n//             <img\n//               key={i}\n//               src={`https://gateway.pinata.cloud/ipfs/${item.substring(6)}`}\n//               alt=\"new\"\n//               className=\"image-list\"\n//             ></img>\n//           </a>\n//         );\n//       });\n//       setData(images);\n//     } else {\n//       alert(\"No image to display\");\n//     }\n//   };\n//   return (\n//     <>\n//       <div className=\"image-list\">{data}</div>\n//       <input\n//         type=\"text\"\n//         placeholder=\"Enter Address\"\n//         className=\"address\"\n//       ></input>\n//       <button className=\"center button\" onClick={getdata}>\n//         Get Data\n//       </button>\n//     </>\n//   );\n// };\n// export default Display;\nvar _c;\n$RefreshReg$(_c, \"Display\");","map":{"version":3,"names":["useState","useEffect","Image","FileText","File","Loader2","jsxDEV","_jsxDEV","Display","contract","account","_s2","_s","$RefreshSig$","data","setData","loading","setLoading","detectFileType","ipfsHash","url","response","fetch","method","contentType","headers","get","includes","isImage","isPDF","error","console","blob","type","startsWith","FileItem","file","fileType","setFileType","isLoading","setIsLoading","determineFileType","hash","className","children","size","fileName","_jsxFileName","lineNumber","columnNumber","href","target","rel","substring","src","alt","getdata","dataArray","Otheraddress","document","querySelector","value","display","e","alert","isEmpty","Object","keys","length","str","toString","str_array","split","files","map","item","fileElements","i","placeholder","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/acer/Documents/BlockShare/client/src/components/Display.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { Image, FileText, File, Loader2 } from \"lucide-react\";\r\n\r\nconst Display = ({ contract, account }) => {\r\n  const [data, setData] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // Improved file type detection\r\n  const detectFileType = async (ipfsHash) => {\r\n    try {\r\n      const url = `https://gateway.pinata.cloud/ipfs/${ipfsHash}`;\r\n      const response = await fetch(url, { method: 'HEAD' });\r\n      const contentType = response.headers.get('content-type');\r\n      \r\n      // More comprehensive content type checking\r\n      if (contentType?.includes('image/') || \r\n          await isImage(url)) {\r\n        return 'image';\r\n      } else if (contentType?.includes('application/pdf') || \r\n                 await isPDF(url)) {\r\n        return 'pdf';\r\n      }\r\n      return 'other';\r\n    } catch (error) {\r\n      console.error('Error detecting file type:', error);\r\n      return 'other';\r\n    }\r\n  };\r\n\r\n  // Helper function to check if URL points to an image\r\n  const isImage = async (url) => {\r\n    try {\r\n      const response = await fetch(url);\r\n      const blob = await response.blob();\r\n      return blob.type.startsWith('image/');\r\n    } catch {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Helper function to check if URL points to a PDF\r\n  const isPDF = async (url) => {\r\n    try {\r\n      const response = await fetch(url);\r\n      const blob = await response.blob();\r\n      return blob.type === 'application/pdf';\r\n    } catch {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const FileItem = ({ file }) => {\r\n    const [fileType, setFileType] = useState('unknown');\r\n    const [isLoading, setIsLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n      const determineFileType = async () => {\r\n        const type = await detectFileType(file.hash);\r\n        setFileType(type);\r\n        setIsLoading(false);\r\n      };\r\n      determineFileType();\r\n    }, [file]);\r\n\r\n    if (isLoading) {\r\n      return (\r\n        <div className=\"file-item p-3 border rounded-lg\">\r\n          <div className=\"flex items-center gap-2\">\r\n            <Loader2 className=\"animate-spin text-gray-400\" size={24} />\r\n            <span className=\"text-gray-500\">Detecting file type...</span>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className=\"file-item p-3 border rounded-lg hover:bg-gray-50 transition-colors\">\r\n        <a\r\n          href={`https://gateway.pinata.cloud/ipfs/${file.hash}`}\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n          className=\"flex items-start gap-3\"\r\n        >\r\n          <div className={`icon-wrapper p-2 rounded-lg ${\r\n            fileType === 'image' ? 'bg-green-100' :\r\n            fileType === 'pdf' ? 'bg-red-100' : 'bg-blue-100'\r\n          }`}>\r\n            {fileType === 'image' ? (\r\n              <Image className=\"text-green-500\" size={24} />\r\n            ) : fileType === 'pdf' ? (\r\n              <FileText className=\"text-red-500\" size={24} />\r\n            ) : (\r\n              <File className=\"text-blue-500\" size={24} />\r\n            )}\r\n          </div>\r\n          <div className=\"flex-grow\">\r\n            <div className={`font-medium ${\r\n              fileType === 'image' ? 'text-green-700' :\r\n              fileType === 'pdf' ? 'text-red-700' : 'text-blue-700'\r\n            }`}>\r\n              {fileType === 'image' ? 'Image File' :\r\n               fileType === 'pdf' ? 'PDF Document' : 'Unknown File'}\r\n            </div>\r\n            <div className=\"text-sm text-gray-500 truncate\">\r\n              {file.hash.substring(0, 20)}...\r\n            </div>\r\n          </div>\r\n          {fileType === 'image' && (\r\n            <img\r\n              src={`https://gateway.pinata.cloud/ipfs/${file.hash}`}\r\n              alt=\"preview\"\r\n              className=\"w-16 h-16 object-cover rounded\"\r\n            />\r\n          )}\r\n        </a>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const getdata = async () => {\r\n    setLoading(true);\r\n    let dataArray;\r\n    const Otheraddress = document.querySelector(\".address\").value;\r\n    \r\n    try {\r\n      if (Otheraddress) {\r\n        dataArray = await contract.display(Otheraddress);\r\n      } else {\r\n        dataArray = await contract.display(account);\r\n      }\r\n    } catch (e) {\r\n      alert(\"You don't have access\");\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    const isEmpty = Object.keys(dataArray).length === 0;\r\n\r\n    if (!isEmpty) {\r\n      const str = dataArray.toString();\r\n      const str_array = str.split(\",\");\r\n      \r\n      const files = str_array.map((item) => ({\r\n        url: item,\r\n        hash: item.substring(6)  // Remove 'ipfs://' prefix\r\n      }));\r\n\r\n      const fileElements = files.map((file, i) => (\r\n        <FileItem key={i} file={file} />\r\n      ));\r\n\r\n      setData(fileElements);\r\n    } else {\r\n      alert(\"No files to display\");\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-4\">\r\n      <div className=\"grid grid-cols-1 gap-4 mb-4\">\r\n        {data}\r\n      </div>\r\n      <div className=\"flex gap-2 items-center justify-center\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Enter Address\"\r\n          className=\"address p-2 border rounded w-80\"\r\n        />\r\n        <button\r\n          className=\"flex items-center gap-2 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 disabled:bg-blue-300 disabled:cursor-not-allowed transition-colors\"\r\n          onClick={getdata}\r\n          disabled={loading}\r\n        >\r\n          {loading && <Loader2 className=\"animate-spin\" size={16} />}\r\n          Get Data\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Display;\r\n\r\n\r\n// import { useState } from \"react\";\r\n// import \"./Display.css\";\r\n// const Display = ({ contract, account }) => {\r\n//   const [data, setData] = useState(\"\");\r\n//   const getdata = async () => {\r\n//     let dataArray;\r\n//     const Otheraddress = document.querySelector(\".address\").value;\r\n//     try {\r\n//       if (Otheraddress) {\r\n//         dataArray = await contract.display(Otheraddress);\r\n//         console.log(dataArray);\r\n//       } else {\r\n//         dataArray = await contract.display(account);\r\n//       }\r\n//     } catch (e) {\r\n//       alert(\"You don't have access\");\r\n//     }\r\n//     const isEmpty = Object.keys(dataArray).length === 0;\r\n\r\n//     if (!isEmpty) {\r\n//       const str = dataArray.toString();\r\n//       const str_array = str.split(\",\");\r\n//       // console.log(str);\r\n//       // console.log(str_array);\r\n//       const images = str_array.map((item, i) => {\r\n//         return (\r\n//           <a href={item} key={i} target=\"_blank\">\r\n//             <img\r\n//               key={i}\r\n//               src={`https://gateway.pinata.cloud/ipfs/${item.substring(6)}`}\r\n//               alt=\"new\"\r\n//               className=\"image-list\"\r\n//             ></img>\r\n//           </a>\r\n//         );\r\n//       });\r\n//       setData(images);\r\n//     } else {\r\n//       alert(\"No image to display\");\r\n//     }\r\n//   };\r\n//   return (\r\n//     <>\r\n//       <div className=\"image-list\">{data}</div>\r\n//       <input\r\n//         type=\"text\"\r\n//         placeholder=\"Enter Address\"\r\n//         className=\"address\"\r\n//       ></input>\r\n//       <button className=\"center button\" onClick={getdata}>\r\n//         Get Data\r\n//       </button>\r\n//     </>\r\n//   );\r\n// };\r\n// export default Display;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}